%index(1).
%head(1, r1, p).
%bodyP(1, r1, p).

% ----- extract -----
atom(Index, X) :- head(Index, R, X), index(Index).
atom(Index, X) :- bodyP(Index, R, X), index(Index).
atom(Index, X) :- bodyN(Index, R, X), index(Index).
rule(Index, R) :- head(Index, R, X), index(Index).
rule(Index, R) :- bodyP(Index, R, X), index(Index).
rule(Index, R) :- bodyN(Index, R, X), index(Index).

% ----- guess -----
true(Index, X) | false(Index, X) :- atom(Index, X), index(Index).

% ----- check -----
inReduct(Index, R) :- rule(Index, R), false(Index, X) : bodyN(Index, R, X), index(Index).
outReduct(Index, R) :- rule(Index, R), bodyN(Index, R, X), true(Index, X), index(Index).

% simulate immediate consequence operator
steps(0..5).
out(Index, X, 0) :- atom(Index, X). % before the first iteration everything is out
in(Index, X, NextStep) :- inReduct(Index, R), head(Index, R, X), steps(Step), steps(NextStep), NextStep = Step + 1, in(Index, A, Step) : bodyP(Index, R, A). % atom becomes derivable
notApplicable(Index, R, Step) :- steps(Step), outReduct(Index, R). % rule is not applicable in any Step if it is not even in the reduct
notApplicable(Index, R, Step) :- bodyP(Index, R, A), out(Index, R, Step). % rule is not applicable in Step if a positive body atom is not derived yet
out(Index, X, NextStep) :- out(Index, X, Step), steps(NextStep), NextStep = Step + 1, notApplicable(Index, R, Step) : head(Index, R, X). % atom still not derivable if no rule which derived it is applicable
inMinModel(Index, X) :- in(Index, X, 5).
outMinModel(Index, X) :- out(Index, X, 5).

%#show ok/0.

% compare
noAS(Index) :- true(Index, X), outMinModel(Index, X).
noAS(Index) :- false(Index, X), inMinModel(Index, X).

% ----- saturate -----
true(Index, X) :- atom(Index, X), noAS(Index), index(Index).
false(Index, X) :- atom(Index, X), noAS(Index), index(Index).
inReduct(Index, R) :- rule(Index, R), noAS(Index), index(Index).
outReduct(Index, R) :- rule(Index, R), noAS(Index), index(Index).
notApplicable(Index, R, Step) :- rule(Index, R), noAS(Index), steps(Step), index(Index).
in(Index, X, Step) :- atom(Index, X), noAS(Index), steps(Step), index(Index).
out(Index, X, Step) :- atom(Index, X), noAS(Index), steps(Step), index(Index).
inMinModel(Index, X) :- atom(Index, X), noAS(Index), index(Index).
outMinModel(Index, X) :- atom(Index, X), noAS(Index), index(Index).
